# Requires docker-compose >= 1.29.0
version: '3.8'

services:
  postgres:
    image: postgres:alpine
    ports: 
      - 5432:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: lumos
      POSTGRES_PASSWORD: password
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    
  redis:
    image: redis:bullseye
    user: root:root
    ports: 
      - 6379:6379
    volumes:
      - ./redis/data:/data

  ckb:
    image: nervos/ckb:v0.103.0
    user: root
    ports:
      - 8114:8114   # rpc
      - 8115:8115   # p2p network
    volumes:
      - ./layer1/ckb:/var/lib/ckb
    command: [ "run", "-C", "/var/lib/ckb" ]

  ckb-miner:
    image: nervos/ckb:v0.103.0
    user: root
    volumes:
      - ./layer1/ckb:/var/lib/ckb
    command: [ "miner", "-C", "/var/lib/ckb" ]

  # "nervos/ckb" image have no http clients to do health check for CKB.
  # This short-term service act as a workaround to do health check.
  check-ckb-started-successfully:
    image: curlimages/curl
    volumes:
      - ./layer1/ckb:/var/lib/ckb
    command: [ 'http://ckb:8114', '-H', 'content-type: application/json', '-d', '{ "id": 2, "jsonrpc": "2.0", "method": "get_tip_block_number", "params": [] }' ]
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1000
    depends_on:
      - ckb

  ckb-indexer:
    image: nervos/ckb-indexer:0.3.2
    environment:
      CKB_RPC: http://ckb:8114
    ports:
      - "8116:8116"
    volumes:
      - ./ckb-indexer:/var/lib/ckb-indexer
    command: [ "-c", "http://ckb:8114", "-l", "0.0.0.0:8116", "-s", "/var/lib/ckb-indexer/data" ]
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 10
    depends_on:
      check-ckb-started-successfully:
        condition: service_completed_successfully

  godwoken:
    image: ghcr.io/keroro520/godwoken-prebuilds:v1-godwoken-f86d655
    healthcheck:
      test: /var/lib/layer2/healthcheck.sh
      start_period: 10s
      interval: 30s
      retries: 600
    environment:
      RUST_LOG: info,gw_generator=debug
      GODWOKEN_MODE: fullnode
      RUST_BACKTRACE: full
      STORE_PATH: /var/lib/layer2/data
      ACCOUNTS_DIR: /accounts
      GITHUB_RUN_ID: ${GITHUB_RUN_ID:-""}
    volumes:
      - ./layer2:/var/lib/layer2
      - ../accounts:/accounts
    ports:
      - 8119:8119 # rpc
      - 8120:8120 # err_receipt_ws_listen
    entrypoint: "/var/lib/layer2/entrypoint.sh"
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1
    depends_on:
      postgres:
        condition: service_started
      ckb:
        condition: service_started
      ckb-miner:
        condition: service_started
      ckb-indexer:
        condition: service_started
      check-ckb-started-successfully:
        condition: service_completed_successfully

  web3:
    image: ghcr.io/nervosnetwork/godwoken-web3-prebuilds:refactor-db-01b5da5
    healthcheck:
      test: curl http://127.0.0.1:8024 || exit 1
      start_period: 10s
      interval: 10s
      retries: 30
    volumes:
      - ./layer2/config/web3-config.env:/godwoken-web3/packages/api-server/.env
      - ./web3/entrypoint.sh:/var/lib/web3/entrypoint.sh
    entrypoint: /var/lib/web3/entrypoint.sh
    ports:
      - 8024:8024
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 10
    depends_on:
      ckb:
        condition: service_started
      ckb-miner:
        condition: service_started
      check-ckb-started-successfully:
        condition: service_completed_successfully
      godwoken:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started

  web3-indexer:
    image: ghcr.io/nervosnetwork/godwoken-web3-indexer-prebuilds:refactor-db-01b5da5
    volumes:
      - ./layer2/config:/var/lib/layer2/config
      - ./web3/indexer_entrypoint.sh:/var/lib/web3-indexer/entrypoint.sh
    working_dir: /var/lib/web3-indexer
    entrypoint: /var/lib/web3-indexer/entrypoint.sh
    environment:
      CONFIG_DIR: /var/lib/layer2/config
      RUST_LOG: info
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 10
    depends_on: 
      web3:
        condition: service_healthy
      godwoken:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
